E5
from ortools.linear_solver import pywraplp

# Create the linear solver object
solver = pywraplp.Solver.CreateSolver('GLOP')

# Define the variables
x1 = solver.NumVar(0, 6, 'x1')
x2 = solver.NumVar(0, solver.infinity(), 'x2')
s1 = solver.NumVar(0, solver.infinity(), 's1')
s2 = solver.NumVar(0, solver.infinity(), 's2')

# Define the constraints
c1 = solver.Constraint(-solver.infinity(), 2)
c1.SetCoefficient(x1, -1)
c1.SetCoefficient(x2, 1)
c1.SetCoefficient(s1, 1)

c2 = solver.Constraint(-solver.infinity(), 8)
c2.SetCoefficient(x1, 1)
c2.SetCoefficient(x2, 2)
c2.SetCoefficient(s2, 1)

c3 = solver.Constraint(-solver.infinity(), 6)
c3.SetCoefficient(x1, 1)

# Define the objective function to maximize
objective = solver.Objective()
objective.SetCoefficient(x1, 1)
objective.SetCoefficient(x2, 2)
objective.SetMaximization()

# Solve the problem
status = solver.Solve()

# Check if a solution was found
if status == pywraplp.Solver.OPTIMAL:
    # Print the optimal solution
    print(f'Optimal objective value: {solver.Objective().Value()}')
    print(f'x1 = {x1.solution_value()}')
    print(f'x2 = {x2.solution_value()}')
else:
    print('The problem does not have an optimal solution.')

E6 

from ortools.linear_solver import pywraplp

# Create the linear solver with the GLOP backend.
solver = pywraplp.Solver.CreateSolver('GLOP')

# Define the variables x1 and x2.
x1 = solver.NumVar(0, solver.infinity(), 'x1')
x2 = solver.NumVar(0, solver.infinity(), 'x2')

# Define the objective function to maximize.
objective = solver.Objective()
objective.SetCoefficient(x1, 3)
objective.SetCoefficient(x2, 1)
objective.SetMaximization()

# Define the constraints.
constraint1 = solver.Constraint(4, solver.infinity())
constraint1.SetCoefficient(x1, 1)
constraint1.SetCoefficient(x2, 1)

constraint2 = solver.Constraint(-solver.infinity(), 4)
constraint2.SetCoefficient(x1, -1)
constraint2.SetCoefficient(x2, 1)

constraint3 = solver.Constraint(-solver.infinity(), solver.infinity())
constraint3.SetCoefficient(x1, -1)
constraint3.SetCoefficient(x2, 2)
constraint3.SetBounds(-solver.infinity(), -4)

# Solve the problem.
status = solver.Solve()

if status == pywraplp.Solver.OPTIMAL:
    print('Objective value =', solver.Objective().Value())
    print('x1 =', x1.solution_value())
    print('x2 =', x2.solution_value())
else:
    print('The problem does not have an optimal solution.')




E7
from ortools.linear_solver import pywraplp

# Create the linear solver with the GLOP backend.
solver = pywraplp.Solver.CreateSolver('GLOP')

# Define the variables x1 and x2.
x1 = solver.NumVar(0, solver.infinity(), 'x1')
x2 = solver.NumVar(0, solver.infinity(), 'x2')

# Define the objective function to maximize.
objective = solver.Objective()
objective.SetCoefficient(x1, 3)
objective.SetCoefficient(x2, 1)
objective.SetMaximization()

# Define the constraints.
constraint1 = solver.Constraint(4, solver.infinity())
constraint1.SetCoefficient(x1, -1)
constraint1.SetCoefficient(x2, 1)

constraint2 = solver.Constraint(-solver.infinity(), -4)
constraint2.SetCoefficient(x1, -1)
constraint2.SetCoefficient(x2, 2)

# Solve the problem.
status = solver.Solve()

if status == pywraplp.Solver.OPTIMAL:
    print('Objective value =', solver.Objective().Value())
    print('x1 =', x1.solution_value())
    print('x2 =', x2.solution_value())
else:
    print('The problem does not have an optimal solution.')
